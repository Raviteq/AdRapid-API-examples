extends ../template.jade

block title
  title Image crop example

block description
  - image = 'https://platform.adrapid.com/uploads/client_uploads/demo/img/180bf8_Purple-Flower-7_preview.jpg'
  - pixel = 'https://test.adrapid.com/img/assets/pixel.png'
  - imgBase = 'https://test.adrapid.com/uploads/client_uploads/demo/img/'
  - images = { 'Flower': '180bf8_Purple-Flower-7_preview.jpg', 'Galaxy': '7c7c52_carina_nebula_preview.jpg', 'Overlays': '681b75_Lightroom-Crop-Grid-Overlay_preview.jpg'};
  - ratios = ['1:1', '3:2', '3:1', '2:1', '16:9', '2:3', '1:3',  '1:2', '9:16'];

  h2 Image crop example
  p Sample implementation of the image crop functionality. Documentation is available here: <a href="http://raviteq.github.io/adrapid-api/#crop">http://raviteq.github.io/adrapid-api/#crop</a>. This perticular example is using the <a href="http://odyniec.net/projects/imgareaselect/usage.html">imgAreaSelect</a> library for the crop tool frontend.

  br
  hr
  br

  h3 Select an image

  .boxes
    .box.crop_upload
      label Upload an image
      #upload
  .boxes
    .box 
      label ...or select an image
      select(name='switch')
        each key, ratio in images
          option(value=imgBase + key)= ratio 
        
  .boxes
    .box
      label set aspect ratio
      select(name='ratio')
        option(value='') Any
        each ratio in ratios
           option(value=ratio)= ratio 

  hr
  br

  form#crop_form
    h3 Crop values
    p These values will be posted to the crop method. In a real-world scenario, the form field will be hidden for the end user. We keep track of the width of the thumbnail to be able to send crop values as percentages. 
    
    .boxes.smaller-boxes
      
      .box
        .ba
          label(for='x') X
          input(name="x", placeholder="x")
      
      .box
        .ba
          label(for='y') Y
          input(name="y", placeholder="y")
      
      .box
        .ba
          label(for='width') Width
          input(name="width", placeholder="width")
      
      .box
        .ba
          label(for='height') Height
          input(name="height", placeholder="height")

    .boxes
      .box
        .ba
          label(for='image') Image
          input.full(name="image", value="#{image}", placeholder="image")
      

block head
  link(rel='stylesheet', type='text/css', href='../assets/lib/jquery.imgareaselect-0.9.10/css/imgareaselect-animated.css')

block results
  .flex
    .box
      a(href='#')
        img#cropzone(src="#{image}")
        h4 Image to be cropped
    .box
      a#show(href='#', target='_blank')
        img#preview(src="#{pixel}")
        h4 Result
  
  button#crop-button Crop!

block form

block scripts
  script(type="text/javascript", src="../assets/lib/jquery.imgareaselect-0.9.10/jquery.imgareaselect.min.js")
  script(type="text/javascript", src="../assets/lib/imagesloaded.pkgd.min.js")
  script(type="text/javascript").
    
    // config
    ////////////////////////////////////////////////////

    var api_key = '6271f323ff24875b74569ebc76eafa7c8ce0aa85'; // apidemo
    var adrapid = new AdRapid(api_key); // initialize AdRapid
    var width = $('#cropzone').width();
    var height = $('#cropzone').height();
    var pixel = 'https://test.adrapid.com/img/assets/pixel.png';
    var cropTool;

    // Initialize the crop tool
    // This perticular example is using imgAreaSelect.
    // Documentation available at http://odyniec.net/projects/imgareaselect/
    ////////////////////////////////////////////////////
    
    // wait for images first
    $('body').imagesLoaded()
      .done( function( instance ) {
        console.log('all images successfully loaded');
        setup_croptool(); // set up the crop tool when all images have finished loading
      })
      .fail( function() {
        console.log('all images loaded, at least one is broken');
        setup_croptool(); // some image have failed, try setting up the crop tool anyways
      })
      // debug images loading
      .always( function( instance ) {
        console.log('all images loaded');
      })
      .progress( function( instance, image ) {
        var result = image.isLoaded ? 'loaded' : 'broken';
        console.log( 'image is ' + result + ' for ' + image.img.src );
        console.log(image);
      });

 
    // wrapper for the crop tool
    function setup_croptool() {
      console.log('Setting up crop tool..');

      // set up the crop UI using imgAreaSelect
      cropTool = $('#cropzone').imgAreaSelect({ 
        fadeSpeed: 450, 
        handles: true,
        instance: true,
        x1: width/4, y1: height/4, x2: width-(width/4), y2: height-(height/4), // set initial selection

        // set an initial selection when the crop tool is activated
        onInit: function (img, selection) {
          console.log('Set initial selection...');
          set_selection(selection, img);
        },

        // NOTE: don't do this calculation every time selection
        // is changed, only need to do it on select end or when
        // the user clicks the crop button.
        onSelectChange: function (img, selection) {
          set_selection(selection, img);
        },

        // set the final selection when user has stopped dragging
        onSelectEnd: function(img, selection) {
          set_selection(selection, img);
        }

      });


      // create an image select function
      ////////////////////////////////////////////////////

      $('select[name=switch]').change(function(event) {
        var val = $(this).val();
        $('#cropzone').attr('src', val);
        $('input[name=image]').val(val);
        $('#preview').attr('src', pixel);
        cropTool.update(); // re-draw cropTool selection, preventing issues if the ratio of the image has changed
      });

      // trigger select on the first value
      $('select[name=switch]').trigger('change');

    }


    // cropzone helper functions
    ////////////////////////////////////////////////////

    function set_selection(selection, img) {
      
      // re-calculate dimensions of thumbnail - user may have resized the window
      width = $('#cropzone').width(); 
      height = $('#cropzone').height();

      // calculate new values, save in form
      $('input[name=x]').val(getPercentage(selection.x1, width));
      $('input[name=y]').val(getPercentage(selection.y1, height));
      $('input[name=width]').val(getPercentage(selection.width, width));
      $('input[name=height]').val(getPercentage(selection.height, height));
      $('input[name=thumbnail_width]').val(width);
    }

    function getPercentage(part, full) {
      if(!full) full = width;
      return parseFloat((part / full) * 100).toFixed(4) + '%';
    }

    // the main crop handling function
    function perform_crop() {
      var data = $('#crop_form').serializeArray();
      $('#spinner').fadeIn();

      // cropTool.cancelSelection(); // remove selection

      console.log('Sending crop request with data:');
      console.log($('#crop_form').serializeObject());

      // send request to the AdRapid medias API, providing the 
      // selected image and crop parameters
      helpers.uploadMedia(data).then(function(result) {
        console.log('Got result from crop:');
        console.log(result);

        // do something with result of the request
        $('#preview').attr('src', result.image.preview); // update preview with cropped preview thumbnail
        $('#show').attr('href', result.image.preview.replace('_preview', '')); // update link to full-size result
        $('#spinner').fadeOut();
      });
    }

    $('#crop-button').click(perform_crop);


    // attach a file upload helper
    ////////////////////////////////////////////////////
    
    helpers.uploadHelper({
      element: '#upload',
      begin: function() {
        $('#spinner').fadeIn();
      },
      complete: function(data) {
        $('#spinner').fadeOut();
        $('#cropzone').attr('src', data.preview);
        $('input[name=image]').val(data.preview);
        $('#preview').attr('src', pixel); // remove crop preview image
        cropTool.update(); // re-calculate cropTool area since aspect ratio may have changed since last image
      },
    });


    // handle aspect ratio change
    // TODO: set new selection instead of cancel selection
    // need to calculate selection pixels for a given ratio.
    ////////////////////////////////////////////////////

    $('select[name=ratio]').change(function(event) {
      cropTool.setOptions({
        aspectRatio: $(this).val()
      });
      cropTool.cancelSelection();
      //- cropTool.setSelection(50, 50, 100, 100, true); // set new selection
      cropTool.update();
    });


    // handle browser window resize
    ////////////////////////////////////////////////////

    function responsiveSelection() {
      width = $('#cropzone').width();
      height = $('#cropzone').height();
      cropTool.setSelection(width/4, height/4, width-(width/4), height-(height/4), true);
      cropTool.update();
    }

    $(window).resize(responsiveSelection);

  }); // ?